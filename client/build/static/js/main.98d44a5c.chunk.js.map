{"version":3,"sources":["utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","utils/reducers.js","utils/store.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js","assets/spinner.gif"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","cart","useSelector","state","dispatch","useDispatch","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuanity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","currentCategory","products","useQuery","loading","data","useEffect","forEach","then","length","filter","category","map","key","spinner","CategoryMenu","categories","categoryData","id","CartItem","placeholder","value","purchaseQuantity","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","cartState","cartOpen","useLazyQuery","getCheckout","toggleCart","payload","undefined","a","getCart","res","redirectToChekout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","initialState","rootReducer","action","newState","createStore","Home","getState","Detail","useParams","useState","currentProduct","setCurrentProduct","foreach","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"sSAOO,SAASA,EAAWC,EAAWC,EAAQC,GAC5C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAGIC,EAAIC,EAAIC,EAHNC,EAAUC,OAAOC,UAAUC,KAAK,YAAa,GAMnDH,EAAQI,gBAAkB,SAASC,GACjC,IAAMR,EAAKG,EAAQM,OAEnBT,EAAGU,kBAAkB,WAAY,CAAEC,QAAS,QAC5CX,EAAGU,kBAAkB,aAAc,CAAEC,QAAS,QAC9CX,EAAGU,kBAAkB,OAAQ,CAAEC,QAAS,SAI1CR,EAAQS,QAAU,SAASJ,GACzBK,QAAQC,IAAI,uBAGdX,EAAQY,UAAY,SAASP,GAa3B,OAXAR,EAAKG,EAAQM,OAEbR,EAAKD,EAAGgB,YAAYtB,EAAW,aAE/BQ,EAAQD,EAAGgB,YAAYvB,GAGvBM,EAAGY,QAAU,SAASJ,GACpBK,QAAQC,IAAI,SAAUN,IAGhBb,GACN,IAAK,MACHO,EAAMgB,IAAItB,GACVE,EAAQF,GACR,MACF,IAAK,MACH,IAAMuB,EAAMjB,EAAMkB,SAClBD,EAAIJ,UAAY,WACdjB,EAAQqB,EAAIV,SAEd,MACF,IAAK,SACHP,EAAMmB,OAAOzB,EAAO0B,KACpB,MACF,QACET,QAAQC,IAAI,mBAIhBb,EAAGsB,WAAa,WACdvB,EAAGwB,aCCIC,I,UAAAA,EAxDf,SAAqBC,GACnB,IACEC,EAKED,EALFC,MACAC,EAIEF,EAJFE,KACAN,EAGEI,EAHFJ,IACAO,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAGIC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QACpCG,EAAWC,cA4BjB,OACE,yBAAKC,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAE,oBAAef,IACrB,yBACEgB,IAAKV,EACLW,IAAG,kBAAaZ,KAElB,2BAAIC,IAEN,6BACE,6BAAME,EAAN,IDvDD,SAAmBF,EAAMY,GAC9B,OAAc,IAAVA,EACKZ,EAEFA,EAAO,ICmDSa,CAAU,OAAQX,GAAnC,aACA,kCAAQD,IAEV,4BAAQa,QArCM,WAEhB,IAAMC,EAAaZ,EAAKa,MAAK,SAACC,GAAD,OAAcA,EAASvB,MAAQA,KAGxDqB,GACFT,EAAS,CACPY,KCtB2B,sBDuB3BxB,IAAKA,EACLyB,gBAAiBC,SAASL,EAAWI,iBAAmB,IAE1DtD,EAAW,OAAQ,MAAT,YAAC,eACNkD,GADK,IAERI,gBAAiBC,SAASL,EAAWI,iBAAmB,OAG1Db,EAAS,CACPY,KCnCmB,cDoCnBG,QAAQ,2BAAKvB,GAAN,IAAYqB,gBAAiB,MAEtCtD,EAAW,OAAQ,MAAT,YAAC,eAAoBiC,GAArB,IAA2BqB,gBAAiB,QAiBtD,iB,QExDOG,EAAiBC,cAAH,+OA+BdC,GAfqBD,cAAH,6KAeCA,cAAH,uFAShBE,EAAaF,cAAH,iSAqBVG,EAAiBH,cAAH,qI,iBCcZI,MApEf,WACE,IAAMC,EAAkBxB,aAAY,SAACC,GAAD,OAAWA,EAAMuB,mBAC/CC,EAAWzB,aAAY,SAACC,GAAD,OAAWA,EAAMwB,YACxCvB,EAAWC,cAEjB,EAA0BuB,mBAASR,GAA3BS,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAuCjB,OArCAC,qBAAU,WAEJD,GAEF1B,EAAS,CACPY,KFrBuB,kBEsBvBW,SAAUG,EAAKH,WAIjBG,EAAKH,SAASK,SAAQ,SAACb,GACrBxD,EAAW,WAAY,MAAOwD,OAGtBU,GAEVlE,EAAW,WAAY,OAAOsE,MAAK,SAACN,GAElCvB,EAAS,CACPY,KFnCqB,kBEoCrBW,SAAUA,SAIf,CAACG,EAAMD,EAASzB,IAcjB,yBAAKE,UAAU,QACb,6CACCqB,EAASO,OACR,yBAAK5B,UAAU,aAbdoB,EAIEC,EAASQ,QACd,SAAChB,GAAD,OAAaA,EAAQiB,SAAS5C,MAAQkC,KAJ/BC,GAaeU,KAAI,SAAClB,GAAD,OACpB,kBAAC,EAAD,CACEmB,IAAKnB,EAAQ3B,IACbA,IAAK2B,EAAQ3B,IACbK,MAAOsB,EAAQtB,MACfC,KAAMqB,EAAQrB,KACdC,MAAOoB,EAAQpB,MACfC,SAAUmB,EAAQnB,eAKxB,mEAED6B,EAAU,yBAAKpB,IAAK8B,IAAS/B,IAAI,YAAe,OChBxCgC,MAjDf,WACE,IAAMC,EAAavC,aAAY,SAACC,GAAD,OAAWA,EAAMsC,cAC1CrC,EAAWC,cAEjB,EAAwCuB,mBAASN,GAAzCO,EAAR,EAAQA,QAAea,EAAvB,EAAiBZ,KA4BjB,OA1BAC,qBAAU,WACJW,GACFtC,EAAS,CACPY,KHfyB,oBGgBzByB,WAAYC,EAAaD,aAE3BC,EAAaD,WAAWT,SAAQ,SAACI,GAC/BzE,EAAW,aAAc,MAAOyE,OAExBP,GACVlE,EAAW,aAAc,OAAOsE,MAAK,SAAAQ,GACnCrC,EAAS,CACPY,KHxBuB,oBGyBvByB,WAAYA,SAIjB,CAACC,EAAcb,EAASzB,IAUzB,6BACE,kDACCqC,EAAWJ,KAAI,SAACzC,GAAD,OACd,4BACE0C,IAAK1C,EAAKJ,IACVoB,QAAS,WAbG,IAAA+B,IAcE/C,EAAKJ,IAbzBY,EAAS,CACPY,KHhCiC,0BGiCjCU,gBAAiBiB,MAcZ/C,EAAKE,W,yCCiBD8C,EA7DE,SAAC,GAAc,IAAZhD,EAAW,EAAXA,KACVQ,EAAWC,cA6BnB,OACE,yBAAKC,UAAU,YACb,6BACE,yBACEG,IAAG,kBAAab,EAAKC,OACrBW,IAAI,MAGR,6BACE,6BAAMZ,EAAKE,KAAX,MAAoBF,EAAKG,OACzB,6BACE,sCACA,2BACEiB,KAAK,SACL6B,YAAY,IACZC,MAAOlD,EAAKmD,iBACZC,SAnCS,SAACtE,GACd,IAAMoE,EAAQpE,EAAEuE,OAAOH,MAET,IAAVA,GACA1C,EAAS,CACLY,KJhBgB,mBIiBhBxB,IAAKI,EAAKJ,MAEd7B,EAAW,OAAQ,SAAT,eAAwBiC,MAElCQ,EAAS,CACLY,KJrBmB,sBIsBnBxB,IAAKI,EAAKJ,IACVuD,iBAAkB7B,SAAS4B,KAE/BnF,EAAW,OAAQ,MAAT,YAAC,eAAoBiC,GAArB,IAA2BmD,iBAAkB7B,SAAS4B,UAsBlE,0BACEI,KAAK,MACLC,aAAW,QACXvC,QAhDe,SAAAhB,GACnBQ,EAAS,CACLY,KJLoB,mBIMpBxB,IAAKI,EAAKJ,MAEd7B,EAAW,OAAQ,SAAT,eAAwBiC,IA2CrBwD,CAAexD,IAH1B,0B,iCCTK,M,0FAzCb,WACE,OAAOyD,IAAOC,KAAKC,c,sBAGrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAGzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjC1F,OAAO4F,SAASC,OAAO,O,oBAGzB,WAEEL,aAAaM,WAAW,YAExB9F,OAAO4F,SAASC,OAAO,S,cC7BrBE,G,OAAgBC,YAAW,qCAsFlBC,EApFF,WACT,IAAMC,EAAYtE,aAAY,SAACC,GAAD,OAAWA,EAAMF,QACzCwE,EAAWvE,aAAY,SAACC,GAAD,OAAWA,EAAMsE,YACxCrE,EAAWC,cAEjB,EAAgCqE,uBAAalD,GAA7C,mBAAOmD,EAAP,KAAsB7C,EAAtB,KAAsBA,KAqBtB,SAAS8C,IACLxE,EAAS,CAAEY,KNhCQ,cMgCW6D,aAASC,IAwB3C,OA5CA/C,qBAAU,WAAM,4CACZ,4BAAAgD,EAAA,sEACuBpH,EAAW,OAAQ,OAD1C,OACUsC,EADV,OAEIG,EAAS,CAAEY,KNnBa,uBMmBe6D,QAAS,CAAElD,SAAS,YAAK1B,MAFpE,4CADY,sBAMPuE,EAAUtC,QANF,WAAD,wBAOR8C,KAEL,CAACR,EAAUtC,OAAQ9B,IAEtB2B,qBAAU,WACFD,GACAuC,EAAcpC,MAAK,SAACgD,GAChBA,EAAIC,kBAAkB,CAAEC,UAAWrD,EAAKsD,SAASC,eAG1D,CAACvD,IA2BC2C,EAUL,yBAAKnE,UAAU,QACb,yBAAKA,UAAU,QAAQM,QAASgE,GAAhC,WACA,6CACA,6BACI,kBAAC,EAAD,CAAUhF,KAAM,CAACE,KAAK,SAAUD,MAAM,aAAcE,MAAM,EAAGgD,iBAAiB,KAC9E,kBAAC,EAAD,CAAUnD,KAAM,CAACE,KAAK,OAAQD,MAAM,WAAYE,MAAM,EAAGgD,iBAAiB,KAE1E,yBAAKzC,UAAU,0BACb,2CAvCR,WACI,IAAIgF,EAAM,EAIV,OAHAd,EAAUxC,SAAQ,SAAApC,GACd0F,GAAO1F,EAAKG,MAAQH,EAAKmD,oBAEtBuC,EAAIC,QAAQ,GAkCEC,IAEfC,EAAKC,WACH,4BAAQ9E,QAlCpB,WACI,IAAM+E,EAAa,GAEnBnB,EAAUxC,SAAQ,SAACpC,GACf,IAAK,IAAIgG,EAAI,EAAGA,EAAIhG,EAAKmD,iBAAkB6C,IACvCD,EAAWE,KAAKjG,EAAKJ,QAG7BmF,EAAY,CACRmB,UAAW,CAAEnE,SAAUgE,OAyBnB,YAIA,0DAvBJ,yBAAKrF,UAAU,cAAcM,QAASgE,GAClC,0BACI1B,KAAK,MACLC,aAAW,SAFf,kB,QCtDV4C,EAAe,CACjBpE,SAAU,GACV1B,KAAM,GACNwE,UAAU,EACVhC,WAAY,GACZf,gBAAiB,IA4ENsE,EAzEK,WAAmC,IAAlC7F,EAAiC,uDAAzB4F,EAAcE,EAAW,uCAClD,OAAQA,EAAOjF,MAEX,IPxBuB,kBOyBnB,OAAO,2BACAb,GADP,IAEIwB,SAAS,YAAKsE,EAAOtE,YAG7B,IP7ByB,oBO8BrB,OAAO,2BACAxB,GADP,IAEIsC,WAAW,YAAKwD,EAAOxD,cAG/B,IPlC+B,0BOmC3B,OAAO,2BACAtC,GADP,IAEIuB,gBAAiBuE,EAAOvE,kBAEhC,IPtCmB,cOuCf,OAAO,2BACAvB,GADP,IAEIsE,UAAU,EACVxE,KAAK,GAAD,mBAAME,EAAMF,MAAZ,CAAkBgG,EAAO9E,YAErC,IP3C4B,uBO4CxB,OAAO,2BACAhB,GADP,IAEIF,KAAK,GAAD,mBAAME,EAAMF,MAAZ,YAAqBgG,EAAOpB,QAAQlD,aAEhD,IP/CwB,mBOgDrB,IAAIuE,EAAW/F,EAAMF,KAAKkC,QAAO,SAAAhB,GAC7B,OAAOA,EAAQ3B,MAAQyG,EAAOzG,OAGlC,OAAO,2BACAW,GADP,IAEIsE,SAAUyB,EAAShE,OAAS,EAC5BjC,KAAMiG,IAGb,IPzD2B,sBO0DxB,OAAO,2BACA/F,GADP,IAEIsE,UAAU,EACVxE,KAAME,EAAMF,KAAKoC,KAAI,SAAAlB,GAIjB,OAHI8E,EAAOzG,MAAQ2B,EAAQ3B,MACvB2B,EAAQF,gBAAkBgF,EAAOhF,iBAE9BE,OAIlB,IPpEkB,aOqEd,OAAO,2BACAhB,GADP,IAEIsE,UAAU,EACVxE,KAAM,KAGd,IP1EmB,cO2Ef,OAAO,2BACAE,GADP,IAEIsE,UAAWtE,EAAMsE,WAIzB,QACI,OAAOtE,ICvFb/B,EAAQ+H,YAAYH,GAE1BjH,QAAQC,IAAIZ,GAEGA,QCUAgI,EAXF,WAEX,OADArH,QAAQC,IAAR,yBAA8BZ,EAAMiI,aAElC,yBAAK/F,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QC2FSgG,MA7Ff,WACE,IAAM3E,EAAWzB,aAAY,SAACC,GAAD,OAAWA,EAAMwB,YACxC1B,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QACpCG,EAAWC,cACTsC,EAAO4D,cAAP5D,GAER,EAA4C6D,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEA,EAA0B9E,mBAASR,GAA3BS,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAuDjB,OAtBAC,qBAAU,WACJJ,EAASO,OACXwE,EAAkB/E,EAASb,MAAK,SAACK,GAAD,OAAaA,EAAQ3B,MAAQmD,MACpDb,GACT1B,EAAS,CACPY,KVxDuB,kBUyDvBW,SAAUG,EAAKH,WAGjBG,EAAKH,SAASgF,SAAQ,SAACxF,GACrBxD,EAAW,WAAY,MAAOwD,OAEtBU,GACVlE,EAAW,WAAY,OAAOsE,MAAK,SAAC2E,GAClCxG,EAAS,CACPY,KVlEqB,kBUmErBW,SAAUiF,SAIf,CAACjF,EAAUG,EAAMD,EAASzB,EAAUuC,IAGrC,oCACG8D,EACC,yBAAKnG,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAEA,4BAAKkG,EAAe3G,MAEpB,2BAAI2G,EAAeI,aAEnB,2BACE,0CADF,IAC2BJ,EAAe1G,MAAO,IAC/C,4BAAQa,QAjEA,WAChB,IAAMC,EAAaZ,EAAKa,MAAK,SAACC,GAAD,OAAcA,EAASvB,MAAQmD,KAExD9B,GACFT,EAAS,CACPY,KVnB2B,sBUoB3BxB,IAAKmD,EACL1B,gBAAiBC,SAASL,EAAWI,iBAAmB,IAE1DtD,EAAW,OAAQ,MAAT,YAAC,eACNkD,GADK,IAERI,gBAAiBC,SAASL,EAAWI,iBAAmB,OAG1Db,EAAS,CACPY,KVhCmB,cUiCnBG,QAAQ,2BAAMsF,GAAP,IAAuBxF,gBAAiB,MAEjDtD,EAAW,OAAQ,MAAT,YAAC,eAAoB8I,GAArB,IAAqCxF,gBAAiB,QA+C1D,eACA,4BACA6F,UAAW7G,EAAKa,MAAK,SAAAiG,GAAC,OAAIA,EAAEvH,MAAQiH,EAAejH,OACnDoB,QA9Ca,WACrBR,EAAS,CACPY,KVvC0B,mBUwC1BxB,IAAKiH,EAAejH,MAGtB7B,EAAW,OAAQ,SAAT,eAAwB8I,MAsC1B,qBAKF,yBACEhG,IAAG,kBAAagG,EAAe5G,OAC/BW,IAAKiG,EAAe3G,QAGtB,KACH+B,EAAU,yBAAKpB,IAAK8B,IAAS/B,IAAI,YAAe,KACjD,kBAAC,EAAD,QCtFSwG,I,MAAAA,EAVf,YAAkC,IAAbC,EAAY,EAAZA,SACnB,OACE,yBACEC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,OAAQC,WAAY,IAAKC,UAAW,WAEhEL,ICWQM,GAfC,WACd,OACE,6BACE,kBAAC,EAAD,KACE,kDACA,4BACE,0BAAMrE,KAAK,MAAMC,aAAW,gCAA5B,oB,SCPGqE,GAAQnG,cAAH,mMAWLoG,GAAYpG,cAAH,qSAkBTqG,GAAWrG,cAAH,kVCuCNsG,OAhEf,SAAeC,GACb,MAAkCpB,mBAAS,CAAEqB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,sBAAYT,IAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KAAgBA,MAEVC,EAAgB,uCAAG,WAAOC,GAAP,iBAAAtD,EAAA,6DACvBsD,EAAMC,iBADiB,kBAGUJ,EAAM,CACnCpC,UAAW,CAAE+B,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAJtC,OAGfS,EAHe,OAMf/E,EAAQ+E,EAAiBzG,KAAKoG,MAAM1E,MAC1CiC,EAAKyC,MAAM1E,GAPU,gDASrBzE,QAAQC,IAAR,MATqB,yDAAH,sDAahBwJ,EAAe,SAACH,GACpB,MAAwBA,EAAMpF,OAAtBnD,EAAR,EAAQA,KAAMgD,EAAd,EAAcA,MACdkF,EAAa,2BACRD,GADO,mBAETjI,EAAOgD,MAIZ,OACE,yBAAKxC,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,WAAT,uBAEA,qCACA,0BAAMkI,SAAUL,GACd,yBAAK9H,UAAU,+BACb,2BAAOoI,QAAQ,SAAf,kBACA,2BACE7F,YAAY,qBACZ/C,KAAK,QACLkB,KAAK,QACL2B,GAAG,QACHK,SAAUwF,KAGd,yBAAKlI,UAAU,+BACb,2BAAOoI,QAAQ,OAAf,aACA,2BACE7F,YAAY,SACZ/C,KAAK,WACLkB,KAAK,WACL2B,GAAG,MACHK,SAAUwF,KAGbL,EACC,6BACE,uBAAG7H,UAAU,cAAb,2CAEA,KACJ,yBAAKA,UAAU,qBACb,4BAAQU,KAAK,UAAb,cCuBK2H,OAhFf,SAAgBf,GACd,MAAkCpB,mBAAS,CAAEqB,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBC,sBAAYP,IAAvBkB,EAAP,oBAEMR,EAAgB,uCAAG,WAAOC,GAAP,iBAAAtD,EAAA,6DACvBsD,EAAMC,iBADiB,SAEQM,EAAQ,CACrC9C,UAAW,CACT+B,MAAOE,EAAUF,MACjBC,SAAUC,EAAUD,SACpBe,UAAWd,EAAUc,UACrBC,SAAUf,EAAUe,YAPD,OAEjBP,EAFiB,OAUjB/E,EAAQ+E,EAAiBzG,KAAK8G,QAAQpF,MAC5CiC,EAAKyC,MAAM1E,GAXY,2CAAH,sDAchBgF,EAAe,SAACH,GACpB,MAAwBA,EAAMpF,OAAtBnD,EAAR,EAAQA,KAAMgD,EAAd,EAAcA,MACdkF,EAAa,2BACRD,GADO,mBAETjI,EAAOgD,MAIZ,OACE,yBAAKxC,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,UAAT,sBAEA,sCACA,0BAAMkI,SAAUL,GACd,yBAAK9H,UAAU,+BACb,2BAAOoI,QAAQ,aAAf,eACA,2BACE7F,YAAY,QACZ/C,KAAK,YACLkB,KAAK,YACL2B,GAAG,YACHK,SAAUwF,KAGd,yBAAKlI,UAAU,+BACb,2BAAOoI,QAAQ,YAAf,cACA,2BACE7F,YAAY,OACZ/C,KAAK,WACLkB,KAAK,WACL2B,GAAG,WACHK,SAAUwF,KAGd,yBAAKlI,UAAU,+BACb,2BAAOoI,QAAQ,SAAf,UACA,2BACE7F,YAAY,qBACZ/C,KAAK,QACLkB,KAAK,QACL2B,GAAG,QACHK,SAAUwF,KAGd,yBAAKlI,UAAU,+BACb,2BAAOoI,QAAQ,OAAf,aACA,2BACE7F,YAAY,SACZ/C,KAAK,WACLkB,KAAK,WACL2B,GAAG,MACHK,SAAUwF,KAGd,yBAAKlI,UAAU,qBACb,4BAAQU,KAAK,UAAb,cCtBK+H,OArDf,WAqCE,OACE,4BAAQzI,UAAU,iBAChB,4BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,0BAAM2C,KAAK,MAAMC,aAAW,gBAA5B,sBADF,eAMF,6BA3CEsC,EAAKC,WAEL,wBAAIpF,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,iBAAT,kBAIF,wBAAID,UAAU,QAEZ,uBAAG0I,KAAK,IAAIpI,QAAS,kBAAM6E,EAAKwD,WAAhC,YAQJ,wBAAI3I,UAAU,YACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,WAAT,WAIF,wBAAID,UAAU,QACZ,kBAAC,IAAD,CAAMC,GAAG,UAAT,cCWG2I,OArCf,WACI,MAAmBjB,sBAAYR,IAAxB0B,EAAP,oBAqBA,OAnBApH,qBAAU,WAAM,4CACZ,kCAAAgD,EAAA,sEACuBpH,EAAW,OAAQ,OAD1C,UACUsC,EADV,SAEU0B,EAAW1B,EAAKoC,KAAI,SAAAzC,GAAI,OAAIA,EAAKJ,QAE1B0C,OAJjB,iCAK+BiH,EAAS,CAAErD,UAAW,CAAEnE,cALvD,gBAKgBG,EALhB,EAKgBA,KACYA,EAAKqH,SAASxH,SAEtBK,SAAQ,SAACpC,GACjBjC,EAAW,OAAQ,SAAUiC,MAGjCwJ,WAAW9K,OAAO4F,SAASC,OAAO,KAAM,KAZhD,6CADY,uBAAC,WAAD,wBAiBZkF,KACD,CAACF,IAEA,6BACI,kBAAC,EAAD,KACI,wCACA,6DAGA,6ECgBDG,OA7Cf,WACE,IACIC,EADIzH,EAASF,mBAASL,GAAlBO,KAOR,OAJIA,IACFyH,EAAOzH,EAAKyH,MAIZ,oCACE,yBAAKjJ,UAAU,kBACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,2BAECgJ,EACC,oCACE,iDACqBA,EAAKV,UAD1B,IACsCU,EAAKT,UAE1CS,EAAKC,OAAOnH,KAAI,SAACoH,GAAD,OACf,yBAAKnH,IAAKmH,EAAMjK,IAAKc,UAAU,QAC7B,4BACG,IAAIqD,KAAKzC,SAASuI,EAAMC,eAAeC,sBAE1C,yBAAKrJ,UAAU,YACZmJ,EAAM9H,SAASU,KAAI,WAA8BuH,GAA9B,IAAGpK,EAAH,EAAGA,IAAKK,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAArB,OAClB,yBAAKuC,IAAKsH,EAAOtJ,UAAU,kBACzB,kBAAC,IAAD,CAAMC,GAAE,oBAAef,IACrB,yBAAKgB,IAAKV,EAAMW,IAAG,kBAAaZ,KAChC,2BAAIC,IAEN,6BACE,kCAAQC,cAQpB,QCzBN8J,GAAWC,yBAAe,CAC9BC,IAAK,aAGDC,GAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B3G,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLoG,QAAQ,2BACHA,GADE,IAELC,cAAe5G,EAAK,iBAAaA,GAAU,SAK3C6G,GAAS,IAAIC,eAAa,CAC9BC,KAAMP,GAASQ,OAAOX,IACtBY,MAAO,IAAIC,kBAwBEC,OArBf,WACE,OACE,kBAAC,iBAAD,CAAgBN,OAAQA,IACtB,kBAAC,IAAD,KACE,6BACI,kBAAC,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAW1E,IACjC,kBAAC,IAAD,CAAOwE,OAAK,EAACC,KAAK,SAASC,UAAWnD,KACtC,kBAAC,IAAD,CAAOiD,OAAK,EAACC,KAAK,UAAUC,UAAWnC,KACvC,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,gBAAgBC,UAAWxB,KAC7C,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,gBAAgBC,UAAWxE,IAC7C,kBAAC,IAAD,CAAOsE,OAAK,EAACC,KAAK,WAAWC,UAAW5B,KACxC,kBAAC,IAAD,CAAO4B,UAAWvD,UCxC1BwD,GAAcC,QACW,cAA7B1M,OAAO4F,SAAS+G,UAEa,UAA7B3M,OAAO4F,SAAS+G,UAEhB3M,OAAO4F,SAAS+G,SAASC,MACvB,2DAyCJ,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTnJ,MAAK,SAAAwJ,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxL,QACfmL,UAAUC,cAAcO,YAI1B/M,QAAQC,IACN,iHAKEqM,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB1M,QAAQC,IAAI,sCAGRqM,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAA9D,GACLpJ,QAAQoJ,MAAM,4CAA6CA,MC3FjE+D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUhO,MAAOA,GACf,kBAAC,GAAD,QAGJiO,SAASC,eAAe,SDQnB,SAAkBjB,GACvB,GAEE,kBAAmBC,UAAW,CAI9B,GADkB,IAAIiB,IAAIC,GAAwBlO,OAAO4F,SAAS8E,MACpDyD,SAAWnO,OAAO4F,SAASuI,OAIvC,OAGFnO,OAAOoO,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,GAAN,sBAEPzB,KAgEV,SAAiCK,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXjB,QAAS,CAAE,iBAAkB,YAE5BlI,MAAK,SAAA2K,GAEJ,IAAMC,EAAcD,EAASzC,QAAQ2C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAMhL,MAAK,SAAAwJ,GACjCA,EAAayB,aAAajL,MAAK,WAC7B3D,OAAO4F,SAASiJ,eAKpBhC,GAAgBC,EAAOC,MAG1BY,OAAM,WACLlN,QAAQC,IACN,oEAvFAoO,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAMhL,MAAK,WACjClD,QAAQC,IACN,iHAMJmM,GAAgBC,EAAOC,OCjC/BE,I,mBCpBA8B,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.98d44a5c.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n};\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // Open connection to the database 'shop-shop' with thte version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variable to hold reference to the database, transaction (tx), and objectStore\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the '_id' of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id'});\n      db.createObjectStore('cart', { keyPath: '_id'});\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      // save a reference to the database to the 'db' variable\n      db = request.result;\n      // open a transaction do whatever we pass into 'storeName'(must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if theres any errors, let us know\n      db.onerror = function(e) {\n        console.log('error:', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      }\n    }\n  });\n};","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\nimport { ADD_TO_CART, UPDATE_CART_QUANITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n\n  \n\n  const addToCart = () => {\n    // Find the cart item with the maching id\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n\n    // if there was a match, call UPDATE with a new purchase quanity\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANITY,\n        _id: _id,\n        purchaseQuanity: parseInt(itemInCart.purchaseQuanity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuanity: parseInt(itemInCart.purchaseQuanity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: {...item, purchaseQuanity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuanity: 1 });\n    }\n  };\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANITY = 'UPDATE_CART_QUANITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const currentCategory = useSelector((state) => state.currentCategory);\n  const products = useSelector((state) => state.products);\n  const dispatch = useDispatch();\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if theres data to be stored\n    if (data) {\n      // lets store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      // but lets also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    // add else if to check if 'loading' is undefined in 'useQuery()' hook\n    } else if (!loading) {\n      // since we're loading offline, get all of the data from the 'products' store\n      idbPromise('products', 'get').then((products) => {\n        // use retireved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return products;\n    }\n\n    return products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const categories = useSelector((state) => state.categories);\n  const dispatch = useDispatch();\n  \n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      })\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });;\n  }\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANITY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch } from 'react-redux';\n\nconst CartItem = ({ item }) => {\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n            type: REMOVE_FROM_CART,\n            _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n    };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === 0) {\n            dispatch({\n                type: REMOVE_FROM_CART,\n                _id: item._id\n            });\n            idbPromise('cart', 'delete', { ...item });\n        } else {\n            dispatch({\n                type: UPDATE_CART_QUANITY,\n                _id: item._id,\n                purchaseQuantity: parseInt(value)\n            });\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n        }\n    };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { idbPromise } from '../../utils/helpers';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n    const cartState = useSelector((state) => state.cart);\n    const cartOpen = useSelector((state) => state.cartOpen);\n    const dispatch = useDispatch();\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n        async function getCart() {\n            const cart = await idbPromise('cart', 'get');\n            dispatch({ type: ADD_MULTIPLE_TO_CART, payload: { products: [...cart] } });\n        };\n\n        if (!cartState.length) {\n            getCart();\n        }\n    }, [cartState.length, dispatch]);\n\n    useEffect(() => {\n        if (data) {\n            stripePromise.then((res) => {\n                res.redirectToChekout({ sessionId: data.checkout.session });\n            });\n        }\n    }, [data]);\n    \n    function toggleCart() {\n        dispatch({ type: TOGGLE_CART, payload: undefined });\n    }\n\n    function calculateTotal() {\n        let sum = 0;\n        cartState.forEach(item => {\n            sum += item.price * item.purchaseQuantity;\n        });\n        return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n        const productIds = [];\n\n        cartState.forEach((item) => {\n            for (let i = 0; i < item.purchaseQuantity; i++) {\n                productIds.push(item._id);\n            }\n        })\n        getCheckout({\n            variables: { products: productIds}\n        })\n    }\n\n    if (!cartOpen) {\n        return (\n            <div className=\"cart-closed\" onClick={toggleCart}>\n                <span\n                    role=\"img\"\n                    aria-label=\"trash\">🛒</span>\n            </div>\n        )\n    }\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      <div>\n          <CartItem item={{name:'Camera', image:'camera.jpg', price:5, purchaseQuantity:3}} />\n          <CartItem item={{name:'Soap', image:'soap.jpg', price:6, purchaseQuantity:4}} />\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n                </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n    </div>\n  );\n};\n\nexport default Cart;","import {\n    UPDATE_PRODUCTS,\n    UPDATE_CATEGORIES,\n    UPDATE_CURRENT_CATEGORY,\n    ADD_TO_CART,\n    ADD_MULTIPLE_TO_CART,\n    REMOVE_FROM_CART,\n    UPDATE_CART_QUANITY,\n    CLEAR_CART,\n    TOGGLE_CART\n} from '../utils/actions';\n\n\nconst initialState = {\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: '',\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n        case UPDATE_PRODUCTS:\n            return {\n                ...state,\n                products: [...action.products],\n            };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES: \n            return {\n                ...state,\n                categories: [...action.categories]\n            };\n        // if action type value is the value of `UPDATE_CURRENT_CATEGORY, return a new state object with an updated category value\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n                ...state,\n                cartOpen: true,\n                cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n                ...state,\n                cart: [...state.cart, ...action.payload.products]\n            };\n        case REMOVE_FROM_CART:\n           let newState = state.cart.filter(product => {\n               return product._id !== action._id;\n           });\n\n           return {\n               ...state,\n               cartOpen: newState.length > 0,\n               cart: newState\n           };\n\n        case UPDATE_CART_QUANITY: \n           return {\n               ...state,\n               cartOpen: true,\n               cart: state.cart.map(product => {\n                   if (action._id === product._id) {\n                       product.purchaseQuanity = action.purchaseQuanity;\n                   }\n                   return product;\n               })\n           };\n\n        case CLEAR_CART:\n            return {\n                ...state,\n                cartOpen: false,\n                cart: []\n            };\n\n        case TOGGLE_CART:\n            return {\n                ...state,\n                cartOpen: !state.cartOpen\n            };\n\n        // if it's none of these actions, do not update state at all and keep things the same!\n        default: \n            return state;\n    }\n}; \n\nexport default rootReducer;","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nconsole.log(store);\n\nexport default store;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\nimport store from '../utils/store';\n\nconst Home = () => {\n  console.log(`Initial State: ${store.getState()}`)\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANITY, ADD_TO_CART, UPDATE_PRODUCTS } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\nimport { useSelector, useDispatch } from 'react-redux';\n\nfunction Detail() {\n  const products = useSelector((state) => state.products);\n  const cart = useSelector((state) => state.cart);\n  const dispatch = useDispatch();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANITY,\n        _id: id,\n        purchaseQuanity: parseInt(itemInCart.purchaseQuanity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuanity: parseInt(itemInCart.purchaseQuanity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuanity: 1 }\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuanity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.foreach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n            disabled={!cart.find(p => p._id === currentProduct._id)}\n            onClick={removeFromCart}>Remove from Cart</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n        async function saveOrder() {\n            const cart = await idbPromise('cart', 'get');\n            const products = cart.map(item => item._id);\n\n            if (products.length) {\n                const { data } = await addOrder({ variables: { products } });\n                const productData = data.addOrder.products;\n\n                productData.forEach((item) => {\n                    idbPromise('cart', 'delete', item);\n                });\n\n                setTimeout(window.location.assign('/'), 3000);\n            }\n        }\n\n        saveOrder();\n    }, [addOrder])\n    return (\n        <div>\n            <Jumbotron>\n                <h1>Success!</h1>\n                <h2>\n                    Thank you for your  purchase!\n                </h2>\n                <h2>\n                    You will now be redirected to the homepage\n                </h2>\n            </Jumbotron>\n        </div>\n    );\n};\n\nexport default Success;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\n\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './utils/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";"],"sourceRoot":""}